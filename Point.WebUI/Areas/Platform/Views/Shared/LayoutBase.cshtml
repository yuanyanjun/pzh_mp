<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
@RenderSection("PageBefore", false)
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta http-equiv="Content-Language" content="utf-8" />
    <meta name="robots" content="NOINDEX,NOFOLLOW" />
    @{

        var t = Request.QueryString["windowtitle"];
        if (String.IsNullOrWhiteSpace(t))
        {
            t = ViewBag.Title;
        }


    }
    <title>@t</title>
    @Html.RefCss("platform/ligerui/skins/Aqua/css/ligerui-all.css")
    @RenderSection("Style", false)

</head>
<body>
    @RenderSection("Body", false)

    @Html.RefScript("platform/js/jquery-1.8.1.min.js")
    @Html.RefScript("common/js/vue2.1.10.js")
    @Html.RefScript("common/js/vue-extend.js")
    @Html.RefScript("platform/ligerui/js/ligerui.all.js")

    <script type="text/javascript">
        $G = {
            root: '@Point.Common.AppSetting.Default.GetItem("CurrentWebBaseUrl")'
        }

        function buildUrl(path) {
            if (path)
                return path.replace('~/', $G.root + '/');
            return '';
        }

        function urlParam(key, s) {
            if (key) {

                s = !s ? window.location.search : s;

                var r = new RegExp('(?:\\?|&)+' + key + '=([^&]+)(?:&|$)+', 'gi');
                return r.test(s.replace(/&amp;/g, '&')) ? RegExp.$1 : '';

            }
        }

        var Tips = (function () {
            var _dialog = null;

            function callback(cbArgs, cbparam) {
                
                var cb = urlParam(cbparam || 'callback');
                if (cb) {

                    var fn = window.opener[cb];
                    if (typeof fn != 'undefined') {
                        if (typeof (fn.defer) != 'undefined') {

                            var re = true;
                            try {
                                if (cbArgs)
                                    return fn(cbArgs);
                                else
                                    return fn();
                            }
                            catch (e) {
                            }

                        }
                    }
                }
            }

            return {
                openWindow: function (opts) {
                    var setting = $.extend({}, opts);
                    _dialog = $.ligerDialog.open(setting);
                },
                closeWindow: function (isCallback, cbArgs) {
                    if (_dialog) {
                        _dialog.hide();
                    }

                    if (isCallback === true) {
                        if (callback(cbArgs) === false)
                            return;
                    }
                },
                warn: function (s) {
                    $.ligerDialog.open({ type: 'warn', isDrag: false, content: s });
                },
                success: function (s) {
                    $.ligerDialog.open({ type: 'success', isDrag: false, content: s });
                },
                error: function (s) {
                    $.ligerDialog.open({ type: 'error', isDrag: false, content: s });
                }
            }
        })();
    </script>
    @RenderSection("Script", false)
</body>
@RenderSection("BodyAfter", false)
</html>
@RenderSection("PageAfter", false)